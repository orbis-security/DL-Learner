/**
 * Copyright (C) 2007-2011, Jens Lehmann
 *
 * This file is part of DL-Learner.
 * 
 * DL-Learner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DL-Learner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * New version of conf file parser, which prepares a conf file for
 * conversion into a Spring configuration. 
 */

options {
  JDK_VERSION = "1.8";
  STATIC = false; 
  UNICODE_INPUT=true;
}

PARSER_BEGIN(ConfParserLegacy)
package org.dllearner.confparser;

import org.dllearner.cli.ConfFileOption;
import org.dllearner.core.ComponentInitException;
import org.dllearner.parser.KBParser;

import java.io.*;
import java.util.*;

public class ConfParserLegacy extends AbstractConfParser {

	public static ConfParser parseFile(File filename) throws FileNotFoundException, ParseException,
			UnsupportedEncodingException {
		ConfParserLegacy parser = new ConfParserLegacy(new InputStreamReader(new FileInputStream(filename), "UTF-8"));
		try {
			parser.init();
		} catch (ComponentInitException e) {
			throw (ParseException) e.getCause();
		}
		return parser;
	}

	public void init() throws ComponentInitException {
		try {
			this.Start();
		} catch (ParseException e) {
			throw new ComponentInitException(e);
		}
		postProcess();
	}

}
PARSER_END(ConfParserLegacy)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
} 

TOKEN :
{
    < COMMAND_END: "." >
  | < ID: ["a"-"z"] (["_","a"-"z","A"-"Z","0"-"9"])* >
  | < NUMBER: (["1"-"9"] (["0"-"9"])* | "0") >
  | < DOUBLE: (["1"-"9"] (["0"-"9"])* | "0") "." (["0"-"9"])* >
  | < STRING: "\"" (~["\"","\\"])* "\"">
//  | < STRING: "\"" (~["\"","\\","\n","\r"])* "\"">
}

void Start() : 
{
	ConfFileOption confOption;
}
{
  (		confOption = ConfOption()  		  
  	   { addConfOption(confOption); }
  )*
  <EOF>
}

ConfFileOption ConfOption() :
{
	boolean containsSubOption=false;
	String value="", value1="", value2="", tmp="", tmp2=""; 
	Set<String> values = new HashSet<String>();
	Map<String,String> tuples = new HashMap<String,String>();
	Map<String,Double> tuplesD = new HashMap<String,Double>();
	
	ConfFileOption option = new ConfFileOption();
	boolean isBeanRef = false;
	boolean isBeanCollection = false;
	String beanName;
	String propertyName = "";
	String propertyValue = "";
	Class<?> propertyType;
	Object val = null;
	Double d;
}
{
  beanName=Id() [ "." propertyName = Id() {containsSubOption=true;} ] 
  "="  (  // two strings separated by a double colon
         // LOOKAHEAD(2) value1=Id() ":" value2=Id() { useColon = true; }
         // simple string
         	propertyValue = Id() {
         	if(propertyValue.equals("true") || propertyValue.equals("false")) {
         	   val = Boolean.valueOf(propertyValue); propertyType = Boolean.class;
         	} else {
         		val = propertyValue; propertyType = String.class; isBeanRef =  true;
         	} }
  		 // simple string enclosed in quotes
         | propertyValue = String() { val = propertyValue; propertyType = String.class; }
         | val = Integer() { propertyValue = val.toString(); propertyType = Integer.class;} 
         | val = Double() { propertyValue = val.toString(); propertyType = Double.class; }
         // empty set
         | LOOKAHEAD("{" "}") "{" "}" { val = new HashSet(); propertyType = Set.class; propertyValue = "{}"; }
         // set with several elements which are quoted
         | LOOKAHEAD(4) "{" (  LOOKAHEAD(2) tmp=String() { values.add(tmp); propertyValue += "\"" + tmp + "\", ";} "," )* 
           tmp=String() {values.add(tmp); propertyValue += "\"" + tmp + "\"";} "}" 
           { propertyType = Set.class; propertyValue = "{"+ propertyValue + "}";; val = values; }
         // empty bean set
         | "-" { val = new HashSet(); propertyType = Set.class; propertyValue = "-"; isBeanCollection = true;}
         // set with several elements which are not quoted
         | "{" ( LOOKAHEAD(4) tmp=Id() { values.add(tmp); propertyValue += tmp + ", "; } "," )* 
           ( tmp=Id()) {values.add(tmp); propertyValue += tmp;} "}" 
           { val = values; propertyType = Set.class; propertyValue = "{"+ propertyValue + "}"; isBeanCollection = true;}
         // empty list
         | LOOKAHEAD("[" "]") "[" "]" { val = new LinkedList(); propertyType = List.class; propertyValue = "[]";}
         // a list with several elements with tuples
         // e.g. [("a","b"),("c","d")]
         | LOOKAHEAD( "[" "(" String() "," String())
           "[" 
           ( LOOKAHEAD(6) "(" tmp=String() "," tmp2=String()  ")"
           { tuples.put(tmp,tmp2); propertyValue += "(\""+ tmp + "\",\"" + tmp2 + "\"), "; } "," )*
           "(" tmp=String() "," tmp2=String() ")"
           { tuples.put(tmp,tmp2); propertyValue += "(\""+ tmp + "\",\"" + tmp2 + "\")";}
           "]" { val = tuples; propertyType = List.class; propertyValue = "["+ propertyValue + "]";}  
         // a list with several elements with doubles
         // e.g. [("a",1.0),("c",0.7)]
         | "[" 
           ( LOOKAHEAD(6) "(" tmp=String() "," d=Double()  ")"
           { tuplesD.put(tmp,d); propertyValue += "(\""+ tmp + "\",\"" + d.toString() + "\"), "; } "," )*
           "(" tmp=String() "," d=Double() ")"
           { tuplesD.put(tmp,d); propertyValue += "(\""+ tmp + "\",\"" + d.toString() + "\")";}
           "]" { val = tuplesD; propertyType = List.class; propertyValue = "["+ propertyValue + "]";}         
            )    
         // <CONF_END>
  {
  	option.setBeanRef(isBeanRef);
  	option.setBeanReferenceCollection(isBeanCollection);
  	option.setBeanName(beanName);
 	if(containsSubOption) {
  		option.setPropertyName(propertyName);
  	}
  	option.setPropertyType(propertyType);
  	option.setPropertyValue(propertyValue);  
  	option.setValueObject(val);	
  	return option;
  }
}

String Individual() :
{
	String name;
}
{
	(name=Id() | name=String())
	{
		return KBParser.getInternalURI(name);
	}
}

String ComplexId() :
{
  Token t1,t2;
}
{
  LOOKAHEAD(2) t1=<ID> ":" t2=<ID> { return t1.image + ":" + t2.image; }  
 |t1=<ID> { return t1.image; }
}
 

String Id() : 
{
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}

Double Double() : 
{
  Token t;
}
{
  t=<DOUBLE>
  {
    return new Double(t.image);
  }
}

Integer Integer() : 
{
  Token t;
}
{
  t=<NUMBER>
  {
    return new Integer(t.image);
  }
}

String String() : 
{
  Token t;
  String s;
}
{
  t=<STRING>
  {
    // enclosing "" are removed
    s = t.image;
    s = s.substring(1, s.length() - 1);
    try {
      s = java.net.URLDecoder.decode(s,"UTF-8");
    } catch (UnsupportedEncodingException e) {
    } catch (IllegalArgumentException e) {
    }
    return s;
  }
}
