baseURI = "http://example.com/father#"
// declare some prefixes to use as abbreviations
prefixes = [ ("ex","http://example.com/father#") ]
rendering = "dlsyntax"

// knowledge source definition
ks.type = "OWL File"
ks.fileName = "father_someonly.owl"

// reasoner
reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

fmeasure.type = "fmeasure"

// learning problem
lp.type = "PosNegLPStandard"
lp.positiveExamples = {"ex:bryan", "ex:bob", "ex:markus"}
lp.negativeExamples = {"ex:stefan", "ex:martin", "ex:anna", "ex:michelle", "ex:alice"}
lp.accuracyMethod = fmeasure

// refinement operator
op.type = "rho"
op.useHasValueConstructor = false

// create learning algorithm to run
alg.type = "celoe"
alg.writeSearchTree = true
alg.replaceSearchTree = true
alg.searchTreeFile = "/tmp/father_someonly-tree.txt"
alg.maxExecutionTimeInSeconds = 10
// alg.startClass = "ex:male or http://example.com/father#female"
